+ gRPC
	- Es una implementación del protocolo RPC. Facildad para crear servidores y clientes en los lenguajes soportados y que se comuniquen entre ellos sin problemas.

	+ Utiliza protocol buffers (serializar datos estructurados)
		- Los datos estructurados se representan mediante message.
		- Define servicios, que poseen métodos con sus parámetros y tipos de retornos definidos.

	- Mediante el archivo proto que define las estructuras y los servicios puedo obtener código para el lenguaje deseado que implemente estos serviciosy estructuras con el compilador protoc.

+ Ejemplo en python para definir un servicio en un .proto y posteriormente crear un servidor y un cliente.
	+ Una vez compilado el archivo proto obtengo:
		- Clases para los mensajes (estructuras), En *_pb2.py, (no implementadas directamente como un class en python, si no como un mensaje de pb.).
		+ Clases para el servicio definido.
			- Stub, invocar los rpc por clientes
			- Servicer, interfaz para implementar el servicio
		- Una función para agregar el servicio a un servidor.

	+ Creo el servidor mediante una subclase del Servicer provisto por el compilador, este incorpora los methodos sin definición, deben ser reescritos.


	+ Notes
		- En python los streams los implemento con iteradores, funciones con yield.
		- El método start del server de grpc no se mantiene por sí solo, se debe agregar un loop que duerma el hilo.